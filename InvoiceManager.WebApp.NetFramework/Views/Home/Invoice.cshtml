@*zamiast oczekiwać w widoku modelu faktury, trzeba zrobić ViewModel żeby zawierał wszystkie info o fakturze oraz o listy klientów i metody płatności*@
@model InvoiceManager.WebApp.NetFramework.Models.ViewModels.EditInvoiceViewModel

@{
	ViewBag.Title = Model.Heading;
	bool isNewInvoice = Model.Invoice.Id == 0;
}

<main>

	<h1 class="mb-3">@Model.Heading</h1>

	@if (!isNewInvoice)
	{
		<button class="btn btn-primary mb-3"
				onclick='window.location.href="@Url.Action("InvoicePosition", "Home", new { invoiceId = Model.Invoice.Id })"'>
			Dodaj pozycję
		</button>

		//JavaScript w onclick bo ma sie tylko wykonac jakaś funkcja, bez przeładowania strony
		<button class="btn btn-secondary mb-3"
				onclick="generatePdf()">
			Generuj PDF
		</button>

		<button class="btn btn-secondary mb-3"
				onclick="printPdf()">
			Drukuj PDF
		</button>
	}

	<div class="row">
		<div class="col-lg-6">

			@*po kliknięciu przycisku typu Submit formularz zostanie przesłany do akcji POST w kontrolerze*@
			@using (Html.BeginForm("Invoice", "Home"))
			{
				// INFO - zabezpieczenie przed atakiem Cross-site request forgery (w skrócie CSRF lub XSRF)
				@Html.AntiForgeryToken()

				//INFO - walidacja poprawności wprowadzonych danych - podsumowanie błędów
				@Html.ValidationSummary()

				if (isNewInvoice)
				{
					<p class="alert alert-info mt-4 mb-4">
						<strong>Pola tytuł, klient, sposób płatności i termin są wymagane.</strong>
					</p>
				}

				//INFO - pola które nie będą uzupełniane, ale będą przekazane do kontrolera
				@Html.HiddenFor(x => x.Invoice.Id)
				@Html.HiddenFor(x => x.Invoice.UserId)
				@*@Html.HiddenFor(x => x.Invoice.CreatedDate)*@

				<div>
					@Html.LabelFor(x => x.Invoice.Title)
					@Html.TextBoxFor(x => x.Invoice.Title, new { @class = "form-control", autofocus = "autofocus" })

					@*INFO - walidacja poprawności wprowadzonych danych*@
					@Html.ValidationMessageFor(x => x.Invoice.Title)
				</div>

				<div>
					@Html.LabelFor(x => x.Invoice.ClientId)
					@Html.DropDownListFor(x => x.Invoice.ClientId, new SelectList(Model.Clients, "Id", "Name"), "-- Wybierz klienta --", new { @class = "form-control" })
					@Html.ValidationMessageFor(x => x.Invoice.ClientId)
				</div>

				if (!isNewInvoice)
				{
					<div>
						@Html.LabelFor(x => x.Invoice.Value)
						@Html.TextBoxFor(x => x.Invoice.Value, new { @class = "form-control", @readonly = "readonly" })
					</div>
				}

				<div>
					@Html.LabelFor(x => x.Invoice.MethodOfPaymentId)
					@Html.DropDownListFor(x => x.Invoice.MethodOfPaymentId, new SelectList(Model.MethodOfPayments, "Id", "Name"), "-- Wybierz sposób płatności --", new { @class = "form-control" })
					@Html.ValidationMessageFor(x => x.Invoice.MethodOfPaymentId)
				</div>

				<div>
					@Html.LabelFor(x => x.Invoice.PaymentDate)
					@Html.TextBoxFor(x => x.Invoice.PaymentDate, "{0:dd-MM-yyyy}", new { @class = "form-control", @id = "PaymentDate", autocomplete = "off" })
					@Html.ValidationMessageFor(x => x.Invoice.PaymentDate)
				</div>

				<div>
					@Html.LabelFor(x => x.Invoice.Comments)
					@Html.TextAreaFor(x => x.Invoice.Comments, new { @class = "form-control" })
					@Html.ValidationMessageFor(x => x.Invoice.Comments)
				</div>

				//przycisk musi być typu submit, wtedy przesyła formularz z widoku do kontrolera
				<button type="submit" class="btn btn-primary btn-lg mb-5">Zapisz</button>
			}
		</div>

		<div class="col-5 offset-lg-1">
			@if (!isNewInvoice)
			{
				//nazwy widoków częściowych poprzedzone są podkresleniem
				@Html.Partial("_InvoicePosition", Model.Invoice.InvoicePositions)
			}
		</div>
	</div>
</main>

@section Scripts
{
	<script type="text/javascript">

        function generatePdf() {
			$.ajax({
				type: 'POST',
				url: "@Url.Action("InvoiceToPdf", "Print")",
				data: {
					invoiceId: '@Model.Invoice.Id'
				},
				success: function (data) {
					window.location = '@Url.Action("DownloadInvoicePdf", "Print")' + '?fileGuid=' + data.FileGuid + '&fileName=' + data.FileName;
				},
				error: function (data) {
					alert(data.Message);
				},
				dataType: 'json',
				cache: false
			});
		}

		function printPdf() {
			//adres do akcji która zwróci cały widok faktury
			var url = '@Url.Action("PrintInvoicePdf", "Print")' + '?invoiceId=' + '@Model.Invoice.Id';

			// nowe okno za pomocą JavaScript
			var myWindow = window.open(url, '', 'width=800,height=600');

			myWindow.onload = function () {
				myWindow.print();
				myWindow.onafterprint = function () {
					myWindow.close();
				}
			};
		}

        function deleteInvoicePosition(positionId, invoiceId, btn) {
            if (!confirm("Czy na pewno chcesz usunąć pozycję?")) {
                return;
            }

            $.ajax({
                type: 'POST',
                url: "@Url.Action("DeletePosition", "Home")",
                data: {
                    positionId: positionId,
                    invoiceId: invoiceId
                },
                success: function (data) {
                    if (data.Success) {
                        // usuwanie z html
                        var row = btn.parentNode.parentNode;
                        row.parentNode.removeChild(row);
                        $('#Invoice_Value').val(data.InvoiceValue.toFixed(2).replace(".", ","));
                    }
                    else {
                        alert(data.Message);
                    }
                },
                error: function (data) {
                    alert(data.Message);
                },
                dataType: 'json'
            });
        }

        $(document).ready(function () {

            //INFO - ustawienia regionalne - strona klienta
            $.validator.methods.number = function (value, element) {
                return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
            }

            $.validator.methods.date = function (value, element) {
                //var isChrome = /Chrome/.test(navigator.userAgent) && /GoogleInc/.test(navigator.vendor);
                //if (isChrome) {
                //    var d = new Date();
                //    return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
                //}
                //else {
                //    return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
                //}
                var d = new Date();
                return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
            }

            $('#PaymentDate').datepicker({
                format: "dd-mm-yyyy",
                language: "pl",
                multidate: false,
                autoclose: true,
                todayHighlight: true,
                forceParse: false
            });
        });
	</script>
}