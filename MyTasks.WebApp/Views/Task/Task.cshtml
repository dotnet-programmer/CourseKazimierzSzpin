@model TaskViewModel

@{
	ViewData["Title"] = Model.Heading;
}

<h1 class="mb-3">@Model.Heading</h1>

@* zapis za pomocą @using (Html.BeginForm("", "")) bo po kliknięciu Submit cały widok będzie odświeżony *@
@using (Html.BeginForm("Task", "Task"))
{
	<p class="alert alert-info mt-4 mb-4">
		Pola tytuł, opis i kategoria są <strong>wymagane</strong>
	</p>

	@Html.AntiForgeryToken()

	@Html.HiddenFor(x => x.Task.TaskId)
	@Html.HiddenFor(x => x.Task.UserId)

	<div class="col-auto form-floating mb-4">
		@Html.TextBoxFor(x => x.Task.Title, new { @class = "form-control", placeholder = "Title", autofocus = "autofocus" })
		@Html.LabelFor(x => x.Task.Title)
		@Html.ValidationMessageFor(x => x.Task.Title)
	</div>

	<div class="col-auto form-floating mb-4">
		@Html.TextBoxFor(x => x.Task.Description, new { @class = "form-control", placeholder = "Description" })
		@Html.LabelFor(x => x.Task.Description)
		@Html.ValidationMessageFor(x => x.Task.Description)
	</div>

	<div class="col-auto form-floating mb-4">
		@Html.DropDownListFor(
				x => x.Task.CategoryId,
				new SelectList(Model.Categories, "CategoryId", "Name"),
				"-- wybierz kategorię --",
				new { @class = "form-select" })
		@Html.LabelFor(x => x.Task.CategoryId)
		@Html.ValidationMessageFor(x => x.Task.CategoryId)
	</div>

	<div class="col-auto form-floating mb-4">
		@Html.TextBoxFor(
				x => x.Task.Term,
				"{0:dd-MM-yyyy}",
				new { @class = "form-control", placeholder = "x", id = "Term", autocomplete = "off" })
		@Html.LabelFor(x => x.Task.Term)
		@Html.ValidationMessageFor(x => x.Task.Term)
	</div>

	if (Model.Task.TaskId > 0)
	{
		<div class="col-auto form-check mb-4">
			@Html.CheckBoxFor(x => x.Task.IsExecuted, new { @class = "form-check-input" })
			@Html.LabelFor(x => x.Task.IsExecuted, new { @class = "form-check-label" })
		</div>
	}

	<button type="submit" class="btn btn-primary btn-lg mt-2">Zapisz</button>
}

@section Scripts
{
    @* konfiguracja przeniesiona do osobnego pliku *@
    @* <script type="text/javascript">
        $(document).ready(function () {
            $('#Term').datepicker({
                format: "dd-mm-yyyy",
                language: "pl",
                multidate: false,
                autoclose: true,
                todayHighlight: true,
                forceParse: false
            });
        });
    </script> *@

    @* Korzyści: 
    - Reużywalność: możesz wywołać initDatepicker z innym selektorem.
    - Czytelność: czystsze widoki.
    - Testowalność: łatwiej przetestować osobno logikę inicjalizacji.
    Jeśli chcesz zainicjalizować wiele pól, możesz np. przekazać klasę zamiast ID i użyć: initDatepicker('.datepicker'); *@
    <script src="~/js/datepicker-init.js"></script>
    <script type="text/javascript">
        $(function () {
            initDatepicker('#Term');
        });
    </script>
}