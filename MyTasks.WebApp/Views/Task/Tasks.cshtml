@model TasksViewModel

@{
	ViewData["Title"] = "Zadania";
}

<h1 class="mb-3">Moje Zadania</h1>

@* formularz filtrowania *@

<form class="row gy-2 gx-3 align-items-center" id="filterForm">
	<div class="col-auto form-floating">
		@Html.TextBoxFor(x => x.FilterTasks.Title, new { @class = "form-control", placeholder = "Tytuł" })
		@* <input type="text" class="form-control" id="autoSizingInput" placeholder="Jane Doe"> *@
		@Html.LabelFor(x => x.FilterTasks.Title, "Tytuł")
		@* <label for="autoSizingInput">Name</label> *@
	</div>
	<div class="col-auto">
		@Html.DropDownListFor(
			x => x.FilterTasks.CategoryId, 
			new SelectList(Model.Categories, "Id", "Name"), 
			"-- wybierz kategorię --", 
			new { @class = "form-select" })
		@* 		<select class="form-select" id="autoSizingSelect">
		<option selected>Choose...</option>
		<option value="1">One</option>
		<option value="2">Two</option>
		<option value="3">Three</option>
		</select> *@
		@* <label class="visually-hidden" for="autoSizingSelect">Preference</label> *@
	</div>
	<div class="col-auto">
		<div class="form-check">
			@Html.CheckBoxFor(x => x.FilterTasks.IsExecuted, new { @class = "form-check-input" })
			@* <input class="form-check-input" type="checkbox" id="autoSizingCheck"> *@
			@Html.LabelFor(x => x.FilterTasks.IsExecuted, new { @class = "form-check-label" })
			@* 			<label class="form-check-label" for="autoSizingCheck">
			Remember me
			</label> *@
		</div>
	</div>
	<div class="col-auto">
		<button type="submit" class="btn btn-primary">Szukaj</button>
	</div>
</form>

@* tabela z zadaniami *@

<div>
	@await Html.PartialAsync("_TasksTable", Model.Tasks)
</div>
@* <partial name="_TasksTable" model="Model.Tasks"/> *@

@section Scripts
{
	<script type="text/javascript">
		$(document).ready(function () {
			$('#filterForm').submit(function () {
				$.ajax({
					type: "POST",
					url: "@Url.Action("Tasks", "Task")",
					data: $(this).serialize(),
					success: function (data) {
						$('#tasksTable').html(data);
					},
					error: function (data) {
						alert(data.message);
					},
					dataType: "html"
				});
				return false;
			});
		});

		function deleteTask(taskId, btn) {
			if (confirm("Czy na pewno chcesz usunąć zadanie?")) {
				return;
			}

			$.ajax({
				type: "POST",
				url: "@Url.Action("DeleteTask", "Task")",
				data: {
					taskId: taskId
				},
				success: function (data) {
					if (data.success {
						var row = btn.parentNode.parentNode;
						row.parentNode.removeChild(row);
					} else {
						alert(data.message)
					}
				},
				error: function (data) {
					alert(data.message);
				},
				dataType: "json"
			});
		}

		function finishTask(taskId, btn) {
			if (confirm("Czy na pewno chcesz oznaczyć zadanie jako zrealizowane?")) {
				return;
			}

			$.ajax({
				type: "POST",
				url: "@Url.Action("FinishTask", "Task")",
				data: {
					taskId: taskId
				},
				success: function (data) {
					if (data.success {
						var row = btn.parentNode.parentNode;
						row.parentNode.removeChild(row);
					} else {
						alert(data.message)
					}
				},
				error: function (data) {
					alert(data.message);
				},
				dataType: "json"
			});
		}
	</script>
}